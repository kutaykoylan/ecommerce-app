--api-tests--

-entity ids that comes with eventsourcing are changed with actual entities.
-there is no need for delay in requests' tests anymore.
-version,history that comes with event sourcing is not used anymore because those variables ensures the eventual
consistency of event sourcing.
-although some delay exists for the requests contains kafka , it is so small compare to delay in ES that can be
neglected.


--integration tests--
-with the absence of event sourcing , we don't have to test kafka contracts of create operations since they are done by JPA
repositories
    - For CQRS , commands are event (kafka topic).
-Since there is no event sourcing framework in non-CQRS project, we do not need to implement another method to see how
messages are consumed. Because event sourcing hides the kafka details from outside.


--implementation and performance difference--
-Because of slowness of the event sourcing, delay for some of the responses are really high.So, we can basically say that
if we are looking for a performance, CQRS with ES is not the best option for us.
-Also, the complexity of the code that comes with event sourcing makes project harder to code and understand
-Since we need to use a framework for event sourcing, our project is highly coupled to event sourcing framework. the behaviour
and the potential inconsistencies of the framework affects the behaviour of the project.
- Altough there are alot of negativities, if the eventual consistency is the one of our significant concerns 
CQRS with ES is the best option
